{"version":3,"sources":["components/AddCategory.tsx","helpers/getGifs.ts","components/GifGridItem.tsx","components/GifGrid.tsx","hooks/useFetchGifs.ts","components/GifExpertApp.tsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputvalue","setInputValue","action","onSubmit","e","preventDefault","length","value","id","type","onChange","target","disabled","getGifs","category","a","url","fetch","response","json","data","map","item","images","downsized_medium","title","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","console","log","image","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAMaA,EAAc,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,cAAmC,EAC3BC,mBAAiB,IADU,mBACxDC,EADwD,KAC5CC,EAD4C,KAiB/D,OACE,qCACE,8CACA,uBAAMC,OAAO,GAAGC,SAbC,SAACC,GAEpB,GADAA,EAAEC,iBACwB,IAAtBL,EAAWM,OACb,OAAO,EAEPR,EAAcE,GACdC,EAAc,KAOd,UACE,uBACEM,MAAOP,EACPQ,GAAG,WACHC,KAAK,OACLC,SAtBkB,SAACN,GACzBH,EAAcG,EAAEO,OAAOJ,UAuBnB,wBAAQK,SAAgC,IAAtBZ,EAAWM,OAAcG,KAAK,SAAhD,iC,uBCjCKI,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbC,EADa,iDACmCF,EADnC,+DAEIG,MAAMD,GAFV,cAEbE,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KAHW,kBAIXA,EAAKC,KAAI,SAACC,GAChB,MAAO,CACLd,GAAIc,EAAKd,GACTQ,IAAKM,EAAKC,OAAOC,iBAAiBR,IAClCS,MAAOH,EAAKG,WARG,2CAAH,sDCOPC,EAAc,SAAC,GAA2B,IAAzBV,EAAwB,EAAxBA,IAAKS,EAAmB,EAAnBA,MACjC,OACE,sBAAKE,UAAU,OAAf,UACE,qBAAKC,IAAKZ,EAAKa,IAAKJ,IACpB,4BAAIA,QCJGK,EAAU,SAAC,GAA6B,IAA3BhB,EAA0B,EAA1BA,SAA0B,ECQxB,SAACA,GAAsB,IAAD,EACrBf,mBAEzB,CACAqB,KAAM,GACNW,SAAS,IALqC,mBACxCC,EADwC,KACjCC,EADiC,KAoB/C,OAVDC,qBAAU,WAERrB,EAAQC,GAAUqB,MAAK,SAACf,GACtBa,EAAS,CACLb,KAAMA,EACNW,SAAS,SAGd,CAACjB,IAEIkB,ED3B0BI,CAAatB,IAAa,GAA9CS,EADoC,EAC1CH,KAAcW,EAD4B,EAC5BA,QAItB,OAFAM,QAAQC,IAAIf,GAGV,gCACE,6BAAKT,IACJiB,GAAW,mBAAGJ,UAAU,oCAAb,qBAEZ,qBAAKA,UAAU,iDAAf,gBACGJ,QADH,IACGA,OADH,EACGA,EAAQF,KAAI,SAACkB,GACZ,OACE,cAAC,EAAD,CAA4BvB,IAAKuB,EAAMvB,IAAKS,MAAOc,EAAMd,OAAvCc,EAAM/B,aEOrBgC,EAvBM,WAAO,IAAD,EACWzC,mBAAS,CAAC,WADrB,mBAClB0C,EADkB,KACN3C,EADM,KAOzB,OACE,qCACE,8CACA,uBAEA,cAAC,EAAD,CAAaA,cATC,SAACS,GACjBT,EAAc,CAACS,GAAF,mBAAYkC,QAUvB,6BACGA,EAAWpB,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CAASR,SAAUQ,GAAWA,YCdxCoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6c74814c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\ntype categoryProps = {\n  setCategories: Function;\n};\n\nexport const AddCategory = ({ setCategories }: categoryProps) => {\n  const [inputvalue, setInputValue] = useState<string>(\"\");\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (inputvalue.length === 0) {\n      return false;\n    } else {\n      setCategories(inputvalue);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <>\n      <h2>Add Category</h2>\n      <form action=\"\" onSubmit={handleSubmit}>\n        <input\n          value={inputvalue}\n          id=\"category\"\n          type=\"text\"\n          onChange={handleInputChange}\n        />\n        <button disabled={inputvalue.length === 0} type=\"submit\">\n          Add Category\n        </button>\n      </form>\n    </>\n  );\n};\n","export const getGifs = async (category: string) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=Ws3cnfGMb4Yws79EAlO4ZtPZoo5xEPg6`;\n    const response = await fetch(url);\n    const { data } = await response.json();\n    return  data.map((item: any) => {\n      return {\n        id: item.id,\n        url: item.images.downsized_medium.url,\n        title: item.title,\n      };\n    });\n    \n    \n  };","import React from \"react\";\n\ninterface props {\n  url: string;\n  title: string;\n}\n\nexport const GifGridItem = ({ url, title }: props) => {\n  return (\n    <div className=\"card\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\ntype gridProps = {\n  category: string;\n};\n\nexport const GifGrid = ({ category }: gridProps) => {\n  const { data: images, loading } = useFetchGifs(category) || {};\n\n  console.log(images);\n\n  return (\n    <div>\n      <h3>{category}</h3>\n      {loading && <p className=\"animate__animated animate__bounce\">Loading</p>}\n\n      <div className=\"cardContainer animate__animated animate__tada \">\n        {images?.map((image) => {\n          return (\n            <GifGridItem key={image.id} url={image.url} title={image.title} />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\ntype gifData = {\n    id: string,\n    url: string,\n    title: string\n}\n\ntype fetchGifsState = {\n    data: gifData[],\n    loading: boolean,\n}\n\n\nexport const useFetchGifs = (category: string) => {\n   const [state, setState] = useState<\n   fetchGifsState\n  >({\n    data: [],\n    loading: true\n  });\n\n\n   // onMounted de Vue\n  useEffect(() => {\n    \n    getGifs(category).then((data) => {\n      setState({\n          data: data as gifData[],\n          loading: false\n      });\n    });\n  }, [category]);\n\n   return state\n}\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./AddCategory\";\nimport { GifGrid } from \"./GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Naruto\"]);\n\n  const handleAdd = (value: string) => {\n    setCategories([value, ...categories]);\n  };\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <hr />\n\n      <AddCategory setCategories={handleAdd} />\n\n      <ol>\n        {categories.map((item) => (\n          <GifGrid category={item} key={item} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"animate.css\";\nimport GifExpertApp from \"./components/GifExpertApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}